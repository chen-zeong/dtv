// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(message, repeated, tag = "1")]
    pub messages_list: ::prost::alloc::vec::Vec<Message>,
    #[prost(string, tag = "2")]
    pub cursor: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub fetch_interval: u64,
    #[prost(uint64, tag = "4")]
    pub now: u64,
    #[prost(string, tag = "5")]
    pub internal_ext: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub fetch_type: u32,
    #[prost(map = "string, string", tag = "7")]
    pub route_params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint64, tag = "8")]
    pub heartbeat_duration: u64,
    #[prost(bool, tag = "9")]
    pub need_ack: bool,
    #[prost(string, tag = "10")]
    pub push_server: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub live_cursor: ::prost::alloc::string::String,
    #[prost(bool, tag = "12")]
    pub history_no_more: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "3")]
    pub msg_id: i64,
    #[prost(int32, tag = "4")]
    pub msg_type: i32,
    #[prost(int64, tag = "5")]
    pub offset: i64,
    #[prost(bool, tag = "6")]
    pub need_wrds_store: bool,
    #[prost(int64, tag = "7")]
    pub wrds_version: i64,
    #[prost(string, tag = "8")]
    pub wrds_sub_key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmojiChatMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(int64, tag = "3")]
    pub emoji_id: i64,
    #[prost(message, optional, tag = "4")]
    pub emoji_content: ::core::option::Option<Text>,
    #[prost(string, tag = "5")]
    pub default_content: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub background_image: ::core::option::Option<Image>,
    #[prost(bool, tag = "7")]
    pub from_intercom: bool,
    #[prost(bool, tag = "8")]
    pub intercom_hide_user_card: bool,
}
/// 聊天
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub visible_to_sender: bool,
    #[prost(message, optional, tag = "5")]
    pub background_image: ::core::option::Option<Image>,
    #[prost(string, tag = "6")]
    pub full_screen_text_color: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub background_image_v2: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "9")]
    pub public_area_common: ::core::option::Option<PublicAreaCommon>,
    #[prost(message, optional, tag = "10")]
    pub gift_image: ::core::option::Option<Image>,
    #[prost(uint64, tag = "11")]
    pub agree_msg_id: u64,
    #[prost(uint32, tag = "12")]
    pub priority_level: u32,
    #[prost(message, optional, tag = "13")]
    pub landscape_area_common: ::core::option::Option<LandscapeAreaCommon>,
    #[prost(uint64, tag = "15")]
    pub event_time: u64,
    #[prost(bool, tag = "16")]
    pub send_review: bool,
    #[prost(bool, tag = "17")]
    pub from_intercom: bool,
    #[prost(bool, tag = "18")]
    pub intercom_hide_user_card: bool,
    ///   repeated chatTagsList = 19;
    #[prost(string, tag = "20")]
    pub chat_by: ::prost::alloc::string::String,
    #[prost(uint32, tag = "21")]
    pub individual_chat_priority: u32,
    #[prost(message, optional, tag = "22")]
    pub rtf_content: ::core::option::Option<Text>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LandscapeAreaCommon {
    #[prost(bool, tag = "1")]
    pub show_head: bool,
    #[prost(bool, tag = "2")]
    pub show_nickname: bool,
    #[prost(bool, tag = "3")]
    pub show_font_color: bool,
    #[prost(string, repeated, tag = "4")]
    pub color_value_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "CommentTypeTag", repeated, tag = "5")]
    pub comment_type_tags_list: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomUserSeqMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, repeated, tag = "2")]
    pub ranks_list: ::prost::alloc::vec::Vec<RoomUserSeqMessageContributor>,
    #[prost(int64, tag = "3")]
    pub total: i64,
    #[prost(string, tag = "4")]
    pub pop_str: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub seats_list: ::prost::alloc::vec::Vec<RoomUserSeqMessageContributor>,
    #[prost(int64, tag = "6")]
    pub popularity: i64,
    #[prost(int64, tag = "7")]
    pub total_user: i64,
    #[prost(string, tag = "8")]
    pub total_user_str: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub total_str: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub online_user_for_anchor: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub total_pv_for_anchor: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub up_right_stats_str: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub up_right_stats_str_complete: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonTextMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "3")]
    pub scene: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFanTicketMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(string, tag = "2")]
    pub room_fan_ticket_count_text: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub room_fan_ticket_count: u64,
    #[prost(bool, tag = "4")]
    pub force_update: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomUserSeqMessageContributor {
    #[prost(uint64, tag = "1")]
    pub score: u64,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(uint64, tag = "3")]
    pub rank: u64,
    #[prost(uint64, tag = "4")]
    pub delta: u64,
    #[prost(bool, tag = "5")]
    pub is_hidden: bool,
    #[prost(string, tag = "6")]
    pub score_description: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub exactly_score: ::prost::alloc::string::String,
}
/// 礼物消息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiftMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(uint64, tag = "2")]
    pub gift_id: u64,
    #[prost(uint64, tag = "3")]
    pub fan_ticket_count: u64,
    #[prost(uint64, tag = "4")]
    pub group_count: u64,
    #[prost(uint64, tag = "5")]
    pub repeat_count: u64,
    #[prost(uint64, tag = "6")]
    pub combo_count: u64,
    #[prost(message, optional, tag = "7")]
    pub user: ::core::option::Option<User>,
    #[prost(message, optional, tag = "8")]
    pub to_user: ::core::option::Option<User>,
    #[prost(uint32, tag = "9")]
    pub repeat_end: u32,
    #[prost(message, optional, tag = "10")]
    pub text_effect: ::core::option::Option<TextEffect>,
    #[prost(uint64, tag = "11")]
    pub group_id: u64,
    #[prost(uint64, tag = "12")]
    pub income_taskgifts: u64,
    #[prost(uint64, tag = "13")]
    pub room_fan_ticket_count: u64,
    #[prost(message, optional, tag = "14")]
    pub priority: ::core::option::Option<GiftImPriority>,
    #[prost(message, optional, tag = "15")]
    pub gift: ::core::option::Option<GiftStruct>,
    #[prost(string, tag = "16")]
    pub log_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "17")]
    pub send_type: u64,
    #[prost(message, optional, tag = "18")]
    pub public_area_common: ::core::option::Option<PublicAreaCommon>,
    #[prost(message, optional, tag = "19")]
    pub tray_display_text: ::core::option::Option<Text>,
    #[prost(uint64, tag = "20")]
    pub banned_display_effects: u64,
    ///   GiftTrayInfo trayInfo = 21;
    ///   AssetEffectMixInfo assetEffectMixInfo = 22;
    #[prost(bool, tag = "25")]
    pub display_for_self: bool,
    #[prost(string, tag = "26")]
    pub interact_gift_info: ::prost::alloc::string::String,
    #[prost(string, tag = "27")]
    pub diy_item_info: ::prost::alloc::string::String,
    #[prost(uint64, repeated, tag = "28")]
    pub min_asset_set_list: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, tag = "29")]
    pub total_count: u64,
    #[prost(uint32, tag = "30")]
    pub client_gift_source: u32,
    ///   AnchorGiftData anchorGift = 31;
    #[prost(uint64, repeated, tag = "32")]
    pub to_user_ids_list: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, tag = "33")]
    pub send_time: u64,
    #[prost(uint64, tag = "34")]
    pub force_display_effects: u64,
    #[prost(string, tag = "35")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "36")]
    pub effect_display_ts: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiftStruct {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
    #[prost(string, tag = "2")]
    pub describe: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub notify: bool,
    #[prost(uint64, tag = "4")]
    pub duration: u64,
    #[prost(uint64, tag = "5")]
    pub id: u64,
    ///   GiftStructFansClubInfo fansclubInfo = 6;
    #[prost(bool, tag = "7")]
    pub for_linkmic: bool,
    #[prost(bool, tag = "8")]
    pub doodle: bool,
    #[prost(bool, tag = "9")]
    pub for_fansclub: bool,
    #[prost(bool, tag = "10")]
    pub combo: bool,
    #[prost(uint32, tag = "11")]
    pub r#type: u32,
    #[prost(uint32, tag = "12")]
    pub diamond_count: u32,
    #[prost(bool, tag = "13")]
    pub is_displayed_on_panel: bool,
    #[prost(uint64, tag = "14")]
    pub primary_effect_id: u64,
    #[prost(message, optional, tag = "15")]
    pub gift_label_icon: ::core::option::Option<Image>,
    #[prost(string, tag = "16")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "18")]
    pub manual: ::prost::alloc::string::String,
    #[prost(bool, tag = "19")]
    pub for_custom: bool,
    ///   specialEffectsMap = 20;
    #[prost(message, optional, tag = "21")]
    pub icon: ::core::option::Option<Image>,
    /// fixme 后面的就不写了还有几十个属性
    #[prost(uint32, tag = "22")]
    pub action_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiftImPriority {
    #[prost(uint64, repeated, tag = "1")]
    pub queue_sizes_list: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, tag = "2")]
    pub self_queue_priority: u64,
    #[prost(uint64, tag = "3")]
    pub priority: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextEffect {
    #[prost(message, optional, tag = "1")]
    pub portrait: ::core::option::Option<TextEffectDetail>,
    #[prost(message, optional, tag = "2")]
    pub landscape: ::core::option::Option<TextEffectDetail>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextEffectDetail {
    #[prost(message, optional, tag = "1")]
    pub text: ::core::option::Option<Text>,
    #[prost(uint32, tag = "2")]
    pub text_font_size: u32,
    #[prost(message, optional, tag = "3")]
    pub background: ::core::option::Option<Image>,
    #[prost(uint32, tag = "4")]
    pub start: u32,
    #[prost(uint32, tag = "5")]
    pub duration: u32,
    #[prost(uint32, tag = "6")]
    pub x: u32,
    #[prost(uint32, tag = "7")]
    pub y: u32,
    #[prost(uint32, tag = "8")]
    pub width: u32,
    #[prost(uint32, tag = "9")]
    pub height: u32,
    #[prost(uint32, tag = "10")]
    pub shadow_dx: u32,
    #[prost(uint32, tag = "11")]
    pub shadow_dy: u32,
    #[prost(uint32, tag = "12")]
    pub shadow_radius: u32,
    #[prost(string, tag = "13")]
    pub shadow_color: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub stroke_color: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub stroke_width: u32,
}
/// 成员消息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemberMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(uint64, tag = "3")]
    pub member_count: u64,
    #[prost(message, optional, tag = "4")]
    pub operator: ::core::option::Option<User>,
    #[prost(bool, tag = "5")]
    pub is_set_to_admin: bool,
    #[prost(bool, tag = "6")]
    pub is_top_user: bool,
    #[prost(uint64, tag = "7")]
    pub rank_score: u64,
    #[prost(uint64, tag = "8")]
    pub top_user_no: u64,
    #[prost(uint64, tag = "9")]
    pub enter_type: u64,
    #[prost(uint64, tag = "10")]
    pub action: u64,
    #[prost(string, tag = "11")]
    pub action_description: ::prost::alloc::string::String,
    #[prost(uint64, tag = "12")]
    pub user_id: u64,
    #[prost(message, optional, tag = "13")]
    pub effect_config: ::core::option::Option<EffectConfig>,
    #[prost(string, tag = "14")]
    pub pop_str: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub enter_effect_config: ::core::option::Option<EffectConfig>,
    #[prost(message, optional, tag = "16")]
    pub background_image: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "17")]
    pub background_image_v2: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "18")]
    pub anchor_display_text: ::core::option::Option<Text>,
    #[prost(message, optional, tag = "19")]
    pub public_area_common: ::core::option::Option<PublicAreaCommon>,
    #[prost(uint64, tag = "20")]
    pub user_enter_tip_type: u64,
    #[prost(uint64, tag = "21")]
    pub anchor_enter_tip_type: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAreaCommon {
    #[prost(message, optional, tag = "1")]
    pub user_label: ::core::option::Option<Image>,
    #[prost(uint64, tag = "2")]
    pub user_consume_in_room: u64,
    #[prost(uint64, tag = "3")]
    pub user_send_gift_cnt_in_room: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EffectConfig {
    #[prost(uint64, tag = "1")]
    pub r#type: u64,
    #[prost(message, optional, tag = "2")]
    pub icon: ::core::option::Option<Image>,
    #[prost(uint64, tag = "3")]
    pub avatar_pos: u64,
    #[prost(message, optional, tag = "4")]
    pub text: ::core::option::Option<Text>,
    #[prost(message, optional, tag = "5")]
    pub text_icon: ::core::option::Option<Image>,
    #[prost(uint32, tag = "6")]
    pub stay_time: u32,
    #[prost(uint64, tag = "7")]
    pub anim_asset_id: u64,
    #[prost(message, optional, tag = "8")]
    pub badge: ::core::option::Option<Image>,
    #[prost(uint64, repeated, tag = "9")]
    pub flex_setting_array_list: ::prost::alloc::vec::Vec<u64>,
    #[prost(message, optional, tag = "10")]
    pub text_icon_overlay: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "11")]
    pub animated_badge: ::core::option::Option<Image>,
    #[prost(bool, tag = "12")]
    pub has_sweep_light: bool,
    #[prost(uint64, repeated, tag = "13")]
    pub text_flex_setting_array_list: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, tag = "14")]
    pub center_anim_asset_id: u64,
    #[prost(message, optional, tag = "15")]
    pub dynamic_image: ::core::option::Option<Image>,
    #[prost(map = "string, string", tag = "16")]
    pub extra_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(uint64, tag = "17")]
    pub mp4_anim_asset_id: u64,
    #[prost(uint64, tag = "18")]
    pub priority: u64,
    #[prost(uint64, tag = "19")]
    pub max_wait_time: u64,
    #[prost(string, tag = "20")]
    pub dress_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "21")]
    pub alignment: u64,
    #[prost(uint64, tag = "22")]
    pub alignment_offset: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Text {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub default_patter: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub default_format: ::core::option::Option<TextFormat>,
    #[prost(message, repeated, tag = "4")]
    pub pieces_list: ::prost::alloc::vec::Vec<TextPiece>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPiece {
    #[prost(bool, tag = "1")]
    pub r#type: bool,
    #[prost(message, optional, tag = "2")]
    pub format: ::core::option::Option<TextFormat>,
    #[prost(string, tag = "3")]
    pub string_value: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub user_value: ::core::option::Option<TextPieceUser>,
    #[prost(message, optional, tag = "5")]
    pub gift_value: ::core::option::Option<TextPieceGift>,
    #[prost(message, optional, tag = "6")]
    pub heart_value: ::core::option::Option<TextPieceHeart>,
    #[prost(message, optional, tag = "7")]
    pub pattern_ref_value: ::core::option::Option<TextPiecePatternRef>,
    #[prost(message, optional, tag = "8")]
    pub image_value: ::core::option::Option<TextPieceImage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPieceImage {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
    #[prost(float, tag = "2")]
    pub scaling_rate: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPiecePatternRef {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub default_pattern: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPieceHeart {
    #[prost(string, tag = "1")]
    pub color: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPieceGift {
    #[prost(uint64, tag = "1")]
    pub gift_id: u64,
    #[prost(message, optional, tag = "2")]
    pub name_ref: ::core::option::Option<PatternRef>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PatternRef {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub default_pattern: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPieceUser {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<User>,
    #[prost(bool, tag = "2")]
    pub with_colon: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextFormat {
    #[prost(string, tag = "1")]
    pub color: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub bold: bool,
    #[prost(bool, tag = "3")]
    pub italic: bool,
    #[prost(uint32, tag = "4")]
    pub weight: u32,
    #[prost(uint32, tag = "5")]
    pub italic_angle: u32,
    #[prost(uint32, tag = "6")]
    pub font_size: u32,
    #[prost(bool, tag = "7")]
    pub use_heigh_light_color: bool,
    #[prost(bool, tag = "8")]
    pub use_remote_clor: bool,
}
/// 点赞
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(uint64, tag = "2")]
    pub count: u64,
    #[prost(uint64, tag = "3")]
    pub total: u64,
    #[prost(uint64, tag = "4")]
    pub color: u64,
    #[prost(message, optional, tag = "5")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "6")]
    pub icon: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub double_like_detail: ::core::option::Option<DoubleLikeDetail>,
    #[prost(message, optional, tag = "8")]
    pub display_control_info: ::core::option::Option<DisplayControlInfo>,
    #[prost(uint64, tag = "9")]
    pub linkmic_guest_uid: u64,
    #[prost(string, tag = "10")]
    pub scene: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "11")]
    pub pico_display_info: ::core::option::Option<PicoDisplayInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SocialMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(uint64, tag = "3")]
    pub share_type: u64,
    #[prost(uint64, tag = "4")]
    pub action: u64,
    #[prost(string, tag = "5")]
    pub share_target: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub follow_count: u64,
    #[prost(message, optional, tag = "7")]
    pub public_area_common: ::core::option::Option<PublicAreaCommon>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PicoDisplayInfo {
    #[prost(uint64, tag = "1")]
    pub combo_sum_count: u64,
    #[prost(string, tag = "2")]
    pub emoji: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub emoji_icon: ::core::option::Option<Image>,
    #[prost(string, tag = "4")]
    pub emoji_text: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleLikeDetail {
    #[prost(bool, tag = "1")]
    pub double_flag: bool,
    #[prost(uint32, tag = "2")]
    pub seq_id: u32,
    #[prost(uint32, tag = "3")]
    pub renewals_num: u32,
    #[prost(uint32, tag = "4")]
    pub triggers_num: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayControlInfo {
    #[prost(bool, tag = "1")]
    pub show_text: bool,
    #[prost(bool, tag = "2")]
    pub show_icons: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeChatMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Message>,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub visible_to_sende: bool,
    ///    BackgroundImage backgroundImage = 5;
    ///    PublicAreaCommon publicAreaCommon = 6;
    #[prost(message, optional, tag = "7")]
    pub gift_image: ::core::option::Option<Image>,
    #[prost(uint64, tag = "8")]
    pub agree_msg_id: u64,
    #[prost(string, repeated, tag = "9")]
    pub color_value_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchAgainstScoreMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, optional, tag = "2")]
    pub against: ::core::option::Option<Against>,
    #[prost(uint32, tag = "3")]
    pub match_status: u32,
    #[prost(uint32, tag = "4")]
    pub display_status: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Against {
    #[prost(string, tag = "1")]
    pub left_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub left_logo: ::core::option::Option<Image>,
    #[prost(string, tag = "3")]
    pub left_goal: ::prost::alloc::string::String,
    ///   LeftPlayersList leftPlayersList = 4;
    ///   LeftGoalStageDetail leftGoalStageDetail = 5;
    #[prost(string, tag = "6")]
    pub right_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub right_logo: ::core::option::Option<Image>,
    #[prost(string, tag = "8")]
    pub right_goal: ::prost::alloc::string::String,
    ///   RightPlayersList rightPlayersList  = 9;
    ///   RightGoalStageDetail rightGoalStageDetail = 10;
    #[prost(uint64, tag = "11")]
    pub timestamp: u64,
    #[prost(uint64, tag = "12")]
    pub version: u64,
    #[prost(uint64, tag = "13")]
    pub left_team_id: u64,
    #[prost(uint64, tag = "14")]
    pub right_team_id: u64,
    #[prost(uint64, tag = "15")]
    pub diff_sei2abs_second: u64,
    #[prost(uint32, tag = "16")]
    pub final_goal_stage: u32,
    #[prost(uint32, tag = "17")]
    pub current_goal_stage: u32,
    #[prost(uint32, tag = "18")]
    pub left_score_addition: u32,
    #[prost(uint32, tag = "19")]
    pub right_score_addition: u32,
    #[prost(uint64, tag = "20")]
    pub left_goal_int: u64,
    #[prost(uint64, tag = "21")]
    pub right_goal_int: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Common {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub msg_id: u64,
    #[prost(uint64, tag = "3")]
    pub room_id: u64,
    #[prost(uint64, tag = "4")]
    pub create_time: u64,
    #[prost(uint32, tag = "5")]
    pub monitor: u32,
    #[prost(bool, tag = "6")]
    pub is_show_msg: bool,
    #[prost(string, tag = "7")]
    pub describe: ::prost::alloc::string::String,
    ///   DisplayText displayText = 8;
    #[prost(uint64, tag = "9")]
    pub fold_type: u64,
    #[prost(uint64, tag = "10")]
    pub anchor_fold_type: u64,
    #[prost(uint64, tag = "11")]
    pub priority_score: u64,
    #[prost(string, tag = "12")]
    pub log_id: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub msg_process_filter_k: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub msg_process_filter_v: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub user: ::core::option::Option<User>,
    ///   Room room = 16;
    #[prost(uint64, tag = "17")]
    pub anchor_fold_type_v2: u64,
    #[prost(uint64, tag = "18")]
    pub process_at_sei_time_ms: u64,
    #[prost(uint64, tag = "19")]
    pub random_dispatch_ms: u64,
    #[prost(bool, tag = "20")]
    pub is_dispatch: bool,
    #[prost(uint64, tag = "21")]
    pub channel_id: u64,
    #[prost(uint64, tag = "22")]
    pub diff_sei2abs_second: u64,
    #[prost(uint64, tag = "23")]
    pub anchor_fold_duration: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(uint64, tag = "2")]
    pub short_id: u64,
    #[prost(string, tag = "3")]
    pub nick_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub gender: u32,
    #[prost(string, tag = "5")]
    pub signature: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint64, tag = "7")]
    pub birthday: u64,
    #[prost(string, tag = "8")]
    pub telephone: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub avatar_thumb: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "10")]
    pub avatar_medium: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "11")]
    pub avatar_large: ::core::option::Option<Image>,
    #[prost(bool, tag = "12")]
    pub verified: bool,
    #[prost(uint32, tag = "13")]
    pub experience: u32,
    #[prost(string, tag = "14")]
    pub city: ::prost::alloc::string::String,
    #[prost(int32, tag = "15")]
    pub status: i32,
    #[prost(uint64, tag = "16")]
    pub create_time: u64,
    #[prost(uint64, tag = "17")]
    pub modify_time: u64,
    #[prost(uint32, tag = "18")]
    pub secret: u32,
    #[prost(string, tag = "19")]
    pub share_qrcode_uri: ::prost::alloc::string::String,
    #[prost(uint32, tag = "20")]
    pub income_share_percent: u32,
    #[prost(message, repeated, tag = "21")]
    pub badge_image_list: ::prost::alloc::vec::Vec<Image>,
    #[prost(message, optional, tag = "22")]
    pub follow_info: ::core::option::Option<FollowInfo>,
    #[prost(message, optional, tag = "23")]
    pub pay_grade: ::core::option::Option<PayGrade>,
    #[prost(message, optional, tag = "24")]
    pub fans_club: ::core::option::Option<FansClub>,
    ///   Border Border = 25;
    #[prost(string, tag = "26")]
    pub special_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "27")]
    pub avatar_border: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "28")]
    pub medal: ::core::option::Option<Image>,
    #[prost(message, repeated, tag = "29")]
    pub real_time_icons_list: ::prost::alloc::vec::Vec<Image>,
    #[prost(string, tag = "38")]
    pub display_id: ::prost::alloc::string::String,
    #[prost(string, tag = "46")]
    pub sec_uid: ::prost::alloc::string::String,
    #[prost(uint64, tag = "1022")]
    pub fan_ticket_count: u64,
    #[prost(string, tag = "1028")]
    pub id_str: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1045")]
    pub age_range: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PayGrade {
    #[prost(int64, tag = "1")]
    pub total_diamond_count: i64,
    #[prost(message, optional, tag = "2")]
    pub diamond_icon: ::core::option::Option<Image>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub icon: ::core::option::Option<Image>,
    #[prost(string, tag = "5")]
    pub next_name: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub level: i64,
    #[prost(message, optional, tag = "7")]
    pub next_icon: ::core::option::Option<Image>,
    #[prost(int64, tag = "8")]
    pub next_diamond: i64,
    #[prost(int64, tag = "9")]
    pub now_diamond: i64,
    #[prost(int64, tag = "10")]
    pub this_grade_min_diamond: i64,
    #[prost(int64, tag = "11")]
    pub this_grade_max_diamond: i64,
    #[prost(int64, tag = "12")]
    pub pay_diamond_bak: i64,
    #[prost(string, tag = "13")]
    pub grade_describe: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "14")]
    pub grade_icon_list: ::prost::alloc::vec::Vec<GradeIcon>,
    #[prost(int64, tag = "15")]
    pub screen_chat_type: i64,
    #[prost(message, optional, tag = "16")]
    pub im_icon: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "17")]
    pub im_icon_with_level: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "18")]
    pub live_icon: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "19")]
    pub new_im_icon_with_level: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "20")]
    pub new_live_icon: ::core::option::Option<Image>,
    #[prost(int64, tag = "21")]
    pub upgrade_need_consume: i64,
    #[prost(string, tag = "22")]
    pub next_privileges: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "23")]
    pub background: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "24")]
    pub background_back: ::core::option::Option<Image>,
    #[prost(int64, tag = "25")]
    pub score: i64,
    #[prost(message, optional, tag = "26")]
    pub buff_info: ::core::option::Option<GradeBuffInfo>,
    #[prost(string, tag = "1001")]
    pub grade_banner: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1002")]
    pub profile_dialog_bg: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "1003")]
    pub profile_dialog_bg_back: ::core::option::Option<Image>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FansClub {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<FansClubData>,
    #[prost(map = "int32, message", tag = "2")]
    pub prefer_data: ::std::collections::HashMap<i32, FansClubData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FansClubData {
    #[prost(string, tag = "1")]
    pub club_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub level: i32,
    #[prost(int32, tag = "3")]
    pub user_fans_club_status: i32,
    #[prost(message, optional, tag = "4")]
    pub badge: ::core::option::Option<UserBadge>,
    #[prost(int64, repeated, tag = "5")]
    pub available_gift_ids: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, tag = "6")]
    pub anchor_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserBadge {
    #[prost(map = "int32, message", tag = "1")]
    pub icons: ::std::collections::HashMap<i32, Image>,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GradeBuffInfo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Border {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GradeIcon {
    #[prost(message, optional, tag = "1")]
    pub icon: ::core::option::Option<Image>,
    #[prost(int64, tag = "2")]
    pub icon_diamond: i64,
    #[prost(int64, tag = "3")]
    pub level: i64,
    #[prost(string, tag = "4")]
    pub level_str: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowInfo {
    #[prost(uint64, tag = "1")]
    pub following_count: u64,
    #[prost(uint64, tag = "2")]
    pub follower_count: u64,
    #[prost(uint64, tag = "3")]
    pub follow_status: u64,
    #[prost(uint64, tag = "4")]
    pub push_status: u64,
    #[prost(string, tag = "5")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub follower_count_str: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub following_count_str: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Image {
    #[prost(string, repeated, tag = "1")]
    pub url_list_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub height: u64,
    #[prost(uint64, tag = "4")]
    pub width: u64,
    #[prost(string, tag = "5")]
    pub avg_color: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub image_type: u32,
    #[prost(string, tag = "7")]
    pub open_web_url: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub content: ::core::option::Option<ImageContent>,
    #[prost(bool, tag = "9")]
    pub is_animated: bool,
    #[prost(message, optional, tag = "10")]
    pub flex_setting_list: ::core::option::Option<NinePatchSetting>,
    #[prost(message, optional, tag = "11")]
    pub text_setting_list: ::core::option::Option<NinePatchSetting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NinePatchSetting {
    #[prost(string, repeated, tag = "1")]
    pub setting_list_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageContent {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub font_color: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub level: u64,
    #[prost(string, tag = "4")]
    pub alternative_text: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushFrame {
    #[prost(uint64, tag = "1")]
    pub seq_id: u64,
    #[prost(uint64, tag = "2")]
    pub log_id: u64,
    #[prost(uint64, tag = "3")]
    pub service: u64,
    #[prost(uint64, tag = "4")]
    pub method: u64,
    #[prost(message, repeated, tag = "5")]
    pub headers_list: ::prost::alloc::vec::Vec<HeadersList>,
    #[prost(string, tag = "6")]
    pub payload_encoding: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub payload_type: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "8")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kk {
    #[prost(uint32, tag = "14")]
    pub k: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMessageBody {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub conversation_type: u32,
    #[prost(uint64, tag = "3")]
    pub conversation_short_id: u64,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub ext: ::prost::alloc::vec::Vec<ExtList>,
    #[prost(uint32, tag = "6")]
    pub message_type: u32,
    #[prost(string, tag = "7")]
    pub ticket: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub client_message_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtList {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rsp {
    #[prost(int32, tag = "1")]
    pub a: i32,
    #[prost(int32, tag = "2")]
    pub b: i32,
    #[prost(int32, tag = "3")]
    pub c: i32,
    #[prost(string, tag = "4")]
    pub d: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub e: i32,
    #[prost(message, optional, tag = "6")]
    pub f: ::core::option::Option<rsp::F>,
    #[prost(string, tag = "7")]
    pub g: ::prost::alloc::string::String,
    #[prost(uint64, tag = "10")]
    pub h: u64,
    #[prost(uint64, tag = "11")]
    pub i: u64,
    #[prost(uint64, tag = "13")]
    pub j: u64,
}
/// Nested message and enum types in `Rsp`.
pub mod rsp {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct F {
        #[prost(uint64, tag = "1")]
        pub q1: u64,
        #[prost(uint64, tag = "3")]
        pub q3: u64,
        #[prost(string, tag = "4")]
        pub q4: ::prost::alloc::string::String,
        #[prost(uint64, tag = "5")]
        pub q5: u64,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreMessage {
    #[prost(uint32, tag = "1")]
    pub cmd: u32,
    #[prost(uint32, tag = "2")]
    pub sequence_id: u32,
    #[prost(string, tag = "3")]
    pub sdk_version: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub refer: u32,
    #[prost(uint32, tag = "6")]
    pub inbox_type: u32,
    #[prost(string, tag = "7")]
    pub build_number: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub send_message_body: ::core::option::Option<SendMessageBody>,
    /// 字段名待定
    #[prost(string, tag = "9")]
    pub aa: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub device_platform: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "15")]
    pub headers: ::prost::alloc::vec::Vec<HeadersList>,
    #[prost(uint32, tag = "18")]
    pub auth_type: u32,
    #[prost(string, tag = "21")]
    pub biz: ::prost::alloc::string::String,
    #[prost(string, tag = "22")]
    pub access: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeadersList {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveShoppingMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(int32, tag = "2")]
    pub msg_type: i32,
    #[prost(int64, tag = "4")]
    pub promotion_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomStatsMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(string, tag = "2")]
    pub display_short: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub display_middle: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub display_long: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub display_value: i64,
    #[prost(int64, tag = "6")]
    pub display_version: i64,
    #[prost(bool, tag = "7")]
    pub incremental: bool,
    #[prost(bool, tag = "8")]
    pub is_hidden: bool,
    #[prost(int64, tag = "9")]
    pub total: i64,
    #[prost(int64, tag = "10")]
    pub display_type: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductInfo {
    #[prost(int64, tag = "1")]
    pub promotion_id: i64,
    #[prost(int32, tag = "2")]
    pub index: i32,
    #[prost(int64, repeated, tag = "3")]
    pub target_flash_uids_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, tag = "4")]
    pub explain_type: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CategoryInfo {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag = "3")]
    pub promotion_ids_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub unique_index: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductChangeMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(int64, tag = "2")]
    pub update_timestamp: i64,
    #[prost(string, tag = "3")]
    pub update_toast: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub update_product_info_list: ::prost::alloc::vec::Vec<ProductInfo>,
    #[prost(int64, tag = "5")]
    pub total: i64,
    #[prost(message, repeated, tag = "8")]
    pub update_category_info_list: ::prost::alloc::vec::Vec<CategoryInfo>,
}
/// from <https://github.com/HaoDong108/DouyinBarrageGrab/blob/main/BarrageGrab/proto/message.proto>
/// status = 3 下播
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(int32, tag = "2")]
    pub status: i32,
}
/// from <https://github.com/HaoDong108/DouyinBarrageGrab/blob/main/BarrageGrab/proto/message.proto>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FansclubMessage {
    #[prost(message, optional, tag = "1")]
    pub common_info: ::core::option::Option<Common>,
    /// 升级是1，加入是2
    #[prost(int32, tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub user: ::core::option::Option<User>,
}
/// from <https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomRankMessage.proto>
/// 直播间排行榜
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomRankMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(message, repeated, tag = "2")]
    pub ranks_list: ::prost::alloc::vec::Vec<room_rank_message::RoomRank>,
}
/// Nested message and enum types in `RoomRankMessage`.
pub mod room_rank_message {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RoomRank {
        #[prost(message, optional, tag = "1")]
        pub user: ::core::option::Option<super::User>,
        #[prost(string, tag = "2")]
        pub score_str: ::prost::alloc::string::String,
        #[prost(bool, tag = "3")]
        pub profile_hidden: bool,
    }
}
/// from <https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomMessage.proto>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub supprot_landscape: bool,
    #[prost(enumeration = "RoomMsgTypeEnum", tag = "4")]
    pub roommessagetype: i32,
    #[prost(bool, tag = "5")]
    pub system_top_msg: bool,
    #[prost(bool, tag = "6")]
    pub forced_guarantee: bool,
    #[prost(string, tag = "20")]
    pub biz_scene: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "30")]
    pub buried_point_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// from <https://github.com/jwwsjlm/douyinLive/tree/main/protobuf/douyin.proto>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoomStreamAdaptationMessage {
    #[prost(message, optional, tag = "1")]
    pub common: ::core::option::Option<Common>,
    #[prost(int32, tag = "2")]
    pub adaptation_type: i32,
    #[prost(float, tag = "3")]
    pub adaptation_height_ratio: f32,
    #[prost(float, tag = "4")]
    pub adaptation_body_center_ratio: f32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CommentTypeTag {
    Commenttypetagunknown = 0,
    Commenttypetagstar = 1,
}
impl CommentTypeTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CommentTypeTag::Commenttypetagunknown => "COMMENTTYPETAGUNKNOWN",
            CommentTypeTag::Commenttypetagstar => "COMMENTTYPETAGSTAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMMENTTYPETAGUNKNOWN" => Some(Self::Commenttypetagunknown),
            "COMMENTTYPETAGSTAR" => Some(Self::Commenttypetagstar),
            _ => None,
        }
    }
}
/// from <https://github.com/scx567888/live-room-watcher/blob/master/src/main/proto/douyin_hack/webcast/im/RoomMsgTypeEnum.proto>
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RoomMsgTypeEnum {
    Defaultroommsg = 0,
    Ecomlivereplaysaveroommsg = 1,
    Consumerrelationroommsg = 2,
    Jumanjidataauthnotifymsg = 3,
    Vswelcomemsg = 4,
    Minorrefundmsg = 5,
    Paidliveroomnotifyanchormsg = 6,
    Hostteamsystemmsg = 7,
}
impl RoomMsgTypeEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RoomMsgTypeEnum::Defaultroommsg => "DEFAULTROOMMSG",
            RoomMsgTypeEnum::Ecomlivereplaysaveroommsg => "ECOMLIVEREPLAYSAVEROOMMSG",
            RoomMsgTypeEnum::Consumerrelationroommsg => "CONSUMERRELATIONROOMMSG",
            RoomMsgTypeEnum::Jumanjidataauthnotifymsg => "JUMANJIDATAAUTHNOTIFYMSG",
            RoomMsgTypeEnum::Vswelcomemsg => "VSWELCOMEMSG",
            RoomMsgTypeEnum::Minorrefundmsg => "MINORREFUNDMSG",
            RoomMsgTypeEnum::Paidliveroomnotifyanchormsg => "PAIDLIVEROOMNOTIFYANCHORMSG",
            RoomMsgTypeEnum::Hostteamsystemmsg => "HOSTTEAMSYSTEMMSG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEFAULTROOMMSG" => Some(Self::Defaultroommsg),
            "ECOMLIVEREPLAYSAVEROOMMSG" => Some(Self::Ecomlivereplaysaveroommsg),
            "CONSUMERRELATIONROOMMSG" => Some(Self::Consumerrelationroommsg),
            "JUMANJIDATAAUTHNOTIFYMSG" => Some(Self::Jumanjidataauthnotifymsg),
            "VSWELCOMEMSG" => Some(Self::Vswelcomemsg),
            "MINORREFUNDMSG" => Some(Self::Minorrefundmsg),
            "PAIDLIVEROOMNOTIFYANCHORMSG" => Some(Self::Paidliveroomnotifyanchormsg),
            "HOSTTEAMSYSTEMMSG" => Some(Self::Hostteamsystemmsg),
            _ => None,
        }
    }
}
